package main

import (
	"flag"
	"fmt"
	"net/http"
	"os"
	"os/signal"
	"path/filepath"
	"strconv"
	"strings"
	"sync"
	"syscall"
	"time"

	"supportTicketBotGo/bot"
	"supportTicketBotGo/config"
	"supportTicketBotGo/database"
	"supportTicketBotGo/logger"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func main() {
	// –ü–∞—Ä—Å–∏–º —Ñ–ª–∞–≥–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
	configPath := flag.String("config", "config.json", "–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É")
	webhookHost := flag.String("webhook", "", "URL –¥–ª—è webhook (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://example.com)")
	port := flag.String("port", "8443", "–ü–æ—Ä—Ç –¥–ª—è webhook —Å–µ—Ä–≤–µ—Ä–∞")
	flag.Parse()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	err := config.LoadConfig(*configPath)
	if err != nil {
		panic("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: " + err.Error())
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–µ—Ä
	err = logger.InitLogger(config.AppConfig.LogFile)
	if err != nil {
		panic("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ª–æ–≥–µ—Ä–∞: " + err.Error())
	}
	logger.Info.Println("–õ–æ–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	err = database.ConnectDBOptimized()
	if err != nil {
		logger.Error.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	logger.Info.Println("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
	botAPI, err := tgbotapi.NewBotAPI(config.AppConfig.TelegramToken)
	if err != nil {
		logger.Error.Fatalf("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞: %v", err)
	}

	// –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
	// botAPI.Debug = true

	logger.Info.Printf("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s", botAPI.Self.UserName)

	// –ö–∞–Ω–∞–ª –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, os.Interrupt, syscall.SIGTERM)

	// –§–ª–∞–≥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
	isRunning := true
	var wg sync.WaitGroup

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: webhook –∏–ª–∏ long polling
	if *webhookHost != "" {
		// –†–µ–∂–∏–º webhook
		// *webhookHost –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à–∏–º –ø—É–±–ª–∏—á–Ω—ã–º –¥–æ–º–µ–Ω–æ–º —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, "https://mb0.tech"
		// *port - —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–ª—É—à–∞–µ—Ç Go –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, "8443"

		// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω Telegram
		publicWebhookURL := *webhookHost + "/webhook/" + config.AppConfig.SecureWebhookToken
		logger.Info.Printf("–ü—É–±–ª–∏—á–Ω—ã–π URL –¥–ª—è Telegram webhook: %s", publicWebhookURL)

		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –¥–ª—è Telegram
		whConfig, err := tgbotapi.NewWebhook(publicWebhookURL) // –ò—Å–ø–æ–ª—å–∑—É–µ–º publicWebhookURL
		if err != nil {
			logger.Error.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ webhook: %v", err)
		}
		_, err = botAPI.Request(whConfig) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –≤–µ–±—Ö—É–∫–∞
		if err != nil {
			logger.Error.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: %v", err)
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
		info, err := botAPI.GetWebhookInfo()
		if err != nil {
			logger.Error.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: %v", err)
		}

		if info.LastErrorDate != 0 {
			logger.Warning.Printf("–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ webhook –æ—Ç Telegram: %s (URL: %s)", info.LastErrorMessage, info.URL)
		} else if info.URL == publicWebhookURL {
			logger.Info.Printf("Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω Telegram –¥–ª—è URL: %s", info.URL)
		} else {
			logger.Warning.Printf("URL –≤–µ–±—Ö—É–∫–∞ –≤ Telegram (%s) –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º (%s)", info.URL, publicWebhookURL)
		}

		// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Nginx.
		// Nginx –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —Å https://mb0.tech/webhook/BOT_TOKEN –Ω–∞ http://localhost:PORT/BOT_TOKEN.
		// –ü–æ—ç—Ç–æ–º—É ListenForWebhook –¥–æ–ª–∂–µ–Ω —Å–ª—É—à–∞—Ç—å –Ω–∞ "/"+botAPI.Token.
		internalWebhookPath := "/" + config.AppConfig.SecureWebhookToken
		updates := botAPI.ListenForWebhook(internalWebhookPath)
		logger.Info.Printf("–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π HTTP-—Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –ø—É—Ç—å: %s", internalWebhookPath)

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /superconnect
		http.HandleFunc("/superconnect", func(w http.ResponseWriter, r *http.Request) {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–µ—Ç–æ–¥ –∑–∞–ø—Ä–æ—Å–∞ - POST
			if r.Method != http.MethodPost {
				http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
				return
			}

			// –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
			if err := r.ParseForm(); err != nil {
				logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ñ–æ—Ä–º—ã: %v", err)
				http.Error(w, "Bad request", http.StatusBadRequest)
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
			senderID := r.FormValue("sender_id")
			message := r.FormValue("message")
			accepterID := r.FormValue("accepter_id")
			token := r.FormValue("super_connect_token")

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
			if token != config.AppConfig.SuperConnectToken {
				logger.Error.Printf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω: %s", token)
				http.Error(w, "Unauthorized", http.StatusUnauthorized)
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
			if senderID == "" || message == "" || accepterID == "" {
				logger.Error.Printf("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
				http.Error(w, "Missing required parameters", http.StatusBadRequest)
				return
			}

			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º accepterID –≤ int64
			userID, err := strconv.ParseInt(accepterID, 10, 64)
			if err != nil {
				logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ accepter_id: %v", err)
				http.Error(w, "Invalid accepter_id", http.StatusBadRequest)
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
			user, err := database.GetUserByID(userID)
			if err != nil {
				logger.Error.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: %v", err)
				http.Error(w, "User not found", http.StatusNotFound)
				return
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –§–ò–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			fullMessage := fmt.Sprintf("üì¢ *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ*\n\n–û—Ç: %s\n\n%s", user.FullName, message)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			msg := tgbotapi.NewMessage(userID, fullMessage)
			msg.ParseMode = "Markdown"
			_, err = botAPI.Send(msg)
			if err != nil {
				logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
				http.Error(w, "Failed to send message", http.StatusInternalServerError)
				return
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
			w.WriteHeader(http.StatusOK)
			w.Write([]byte("Message sent successfully"))
		})

		// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ –Ω–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º –ø–æ—Ä—Ç—É *port
		go func() {
			logger.Info.Printf("–ó–∞–ø—É—Å–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ webhook HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É %s", *port)
			// http.ListenAndServe –±—É–¥–µ—Ç —Å–ª—É—à–∞—Ç—å –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö –Ω–∞ :*port
			// –ü—É—Ç—å internalWebhookPath –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ botAPI.ListenForWebhook
			err := http.ListenAndServe(":"+*port, nil)
			if err != nil {
				// –≠—Ç–∞ –æ—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ —Å–º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Ä—Ç –∑–∞–Ω—è—Ç)
				// –∏–ª–∏ –µ—Å–ª–∏ –æ–Ω –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è.
				// –ï—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–æ–≤–∞—è (—á–µ—Ä–µ–∑ sigChan), —ç—Ç–∞ –≥–æ—Ä—É—Ç–∏–Ω–∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è.
				// –î–ª—è –±–æ–ª–µ–µ —á–∏—Å—Ç–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–∏–≥–Ω–∞–ª–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å http.Server —Å Shutdown().
				logger.Error.Fatalf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ webhook HTTP-—Å–µ—Ä–≤–µ—Ä–∞: %v", err)
			}
		}()

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
		go func() {
			for update := range updates {
				if !isRunning {
					break
				}

				wg.Add(1)
				go func(upd tgbotapi.Update) {
					defer wg.Done()
					handleUpdate(botAPI, upd)
				}(update)
			}
			logger.Info.Println("–ö–∞–Ω–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø—Ä–∏–µ–º –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á.")
		}()
	}

	// –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
	logger.Info.Println("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")

	// –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-sigChan

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	logger.Info.Println("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
	isRunning = false

	// –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è webhook, —É–¥–∞–ª—è–µ–º –µ–≥–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
	if *webhookHost != "" {
		// _, err := botAPI.RemoveWebhook() // –°—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±
		_, err := botAPI.Request(tgbotapi.DeleteWebhookConfig{DropPendingUpdates: false}) // –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞
		if err != nil {
			logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: %v", err)
		} else {
			logger.Info.Println("Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
		}
	}

	logger.Info.Println("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
	// –°–æ–∑–¥–∞–µ–º –∫–∞–Ω–∞–ª –¥–ª—è —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ wg.Wait()
	waitGroupDone := make(chan struct{})
	go func() {
		wg.Wait() // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω handleUpdate
		close(waitGroupDone)
	}()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
	select {
	case <-waitGroupDone:
		logger.Info.Println("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–∞–±–æ—Ç—É.")
	case <-time.After(30 * time.Second): // –¢–∞–π–º–∞—É—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, 30 —Å–µ–∫—É–Ω–¥
		logger.Error.Println("–¢–∞–π–º-–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—á–∏ –º–æ–≥–ª–∏ –Ω–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è.")
	}

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
	logger.Info.Println("–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
	if database.DB != nil {
		err := database.DB.Close()
		if err != nil {
			logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î: %v", err)
		} else {
			logger.Info.Println("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.")
		}
	}
	logger.Info.Println("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
}

// handleUpdate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram API
func handleUpdate(botAPI *tgbotapi.BotAPI, update tgbotapi.Update) {
	defer func() {
		if r := recover(); r != nil {
			logger.Error.Printf("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–∞–Ω–∏–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %v", r)
		}
	}()

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	if update.Message == nil {
		return
	}

	logger.Info.Printf("[%s] %s", update.Message.From.UserName, update.Message.Text)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π
	if update.Message.IsCommand() {
		switch update.Message.Command() {
		case "start":
			bot.HandleStart(botAPI, update.Message)
		case "help":
			// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã help
			helpText := "ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞*\n\n" +
				"–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n" +
				"*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n" +
				"/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
				"/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n" +
				"/ticket <ID> - –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ç–µ\n\n" +
				"*–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n" +
				"‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤\n" +
				"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤\n" +
				"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤\n" +
				"‚Ä¢ –û–±–º–µ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π\n" +
				"‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Ç–∏–∫–µ—Ç—ã"

			msg := tgbotapi.NewMessage(update.Message.Chat.ID, helpText)
			msg.ParseMode = "Markdown"
			bot.SafeSendMessage(botAPI, msg)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç
			bot.SendRandomTip(botAPI, update.Message.Chat.ID)
		case "ticket":
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /ticket <ID>
			args := update.Message.CommandArguments()
			if args == "" {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID —Ç–∏–∫–µ—Ç–∞: /ticket <ID>")
				bot.SafeSendMessage(botAPI, msg)
				return
			}

			// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID —Ç–∏–∫–µ—Ç–∞ –≤ —á–∏—Å–ª–æ
			ticketID, err := strconv.Atoi(args)
			if err != nil {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —Ç–∏–∫–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /ticket <ID>")
				bot.SafeSendMessage(botAPI, msg)
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
			ticket, err := database.GetTicketByID(ticketID)
			if err != nil {
				logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞ %d: %v", ticketID, err)
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ö†Ô∏è –¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –µ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏–∏.")
				bot.SafeSendMessage(botAPI, msg)
				return
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			if ticket.UserID != update.Message.From.ID {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —Ç–∏–∫–µ—Ç—É.")
				bot.SafeSendMessage(botAPI, msg)
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
			messages, err := database.GetTicketMessages(ticketID)
			if err != nil {
				logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–∫–µ—Ç–∞ %d: %v", ticketID, err)
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–∫–µ—Ç–∞.")
				bot.SafeSendMessage(botAPI, msg)
				return
			}

			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
			createdDate := ticket.CreatedAt.Format("02.01.2006 15:04")
			closedDate := ""
			if ticket.Status == "–∑–∞–∫—Ä—ã—Ç" && ticket.ClosedAt.Valid {
				closedDate = fmt.Sprintf("\nüîí –ó–∞–∫—Ä—ã—Ç: %s", ticket.ClosedAt.Time.Format("02.01.2006 15:04"))
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
			statusEmoji := bot.GetStatusEmoji(ticket.Status)

			// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–∫–µ—Ç–µ
			ticketInfo := fmt.Sprintf(
				"üîñ *–¢–∏–∫–µ—Ç #%d*\n%s %s\n\nüìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\nüìÖ –°–æ–∑–¥–∞–Ω: %s%s\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–π: %d\n\n*–û–ø–∏—Å–∞–Ω–∏–µ:*\n%s",
				ticket.ID,
				statusEmoji,
				strings.ReplaceAll(ticket.Title, "*", "\\*"), // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏
				ticket.Category,
				createdDate,
				closedDate,
				len(messages),
				strings.ReplaceAll(ticket.Description, "*", "\\*"), // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏
			)

			msg := tgbotapi.NewMessage(update.Message.Chat.ID, ticketInfo)
			msg.ParseMode = "Markdown"
			bot.SafeSendMessage(botAPI, msg)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
			if len(messages) > 0 {
				historyMsg := "üìú *–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:*\n\n"
				for i, m := range messages {
					senderType := "üë§ –í—ã"
					if m.SenderType == "admin" || m.SenderType == "support" {
						senderType = "üë®‚Äçüíº –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
					}
					msgTime := m.CreatedAt.Format("02.01.2006 15:04")
					// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
					messageText := strings.ReplaceAll(m.Message, "*", "\\*")
					messageText = strings.ReplaceAll(messageText, "_", "\\_")
					historyMsg += fmt.Sprintf("%d. %s (%s):\n%s\n\n", i+1, senderType, msgTime, messageText)
				}

				msg := tgbotapi.NewMessage(update.Message.Chat.ID, historyMsg)
				msg.ParseMode = "Markdown"
				bot.SafeSendMessage(botAPI, msg)
			}

			// –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–∏–∫–µ—Ç–∞
			photos, err := database.GetTicketPhotos(ticketID)
			if err != nil {
				logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–∏–∫–µ—Ç–∞ %d: %v", ticketID, err)
			} else if len(photos) > 0 {
				photoMsg := tgbotapi.NewMessage(update.Message.Chat.ID, "üì∏ *–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:*")
				photoMsg.ParseMode = "Markdown"
				bot.SafeSendMessage(botAPI, photoMsg)

				for i, photo := range photos {
					file, err := os.Open(photo.FilePath)
					if err != nil {
						logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ %s: %v", photo.FilePath, err)
						continue
					}
					defer file.Close()

					ext := filepath.Ext(photo.FilePath)
					if ext == "" {
						ext = ".jpg"
					}

					photoConfig := tgbotapi.NewPhoto(update.Message.Chat.ID, tgbotapi.FileReader{
						Name:   fmt.Sprintf("photo_%d%s", i+1, ext),
						Reader: file,
					})

					caption := fmt.Sprintf("üì∑ –§–æ—Ç–æ #%d", i+1)
					if photo.SenderType == "user" {
						caption += " (–æ—Ç –≤–∞—Å)"
					} else {
						caption += " (–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏)"
					}
					photoConfig.Caption = caption

					_, err = botAPI.Send(photoConfig)
					if err != nil {
						logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ %s: %v", photo.FilePath, err)
					}

					time.Sleep(100 * time.Millisecond) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ
				}
			}

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
			keyboard := tgbotapi.NewReplyKeyboard(
				tgbotapi.NewKeyboardButtonRow(
					tgbotapi.NewKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏"),
				),
			)
			navMsg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤")
			navMsg.ReplyMarkup = keyboard
			bot.SafeSendMessage(botAPI, navMsg)
		default:
			// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
			bot.HandleMessage(botAPI, update.Message)
		}
	} else {
		// –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
		bot.HandleMessage(botAPI, update.Message)
	}
}
