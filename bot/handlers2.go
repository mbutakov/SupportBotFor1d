package bot

import (
	"fmt"
	"math/rand"
	"os"
	"path/filepath"
	"strings"
	"time"

	"supportTicketBotGo/database"
	"supportTicketBotGo/logger"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/skip2/go-qrcode"
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
func HandleMainMenu(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	userID := message.From.ID

	switch message.Text {
	case "üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã", "–ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã":
		tickets, err := database.GetActiveTicketsByUserID(userID)
		if err != nil {
			logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
			SendErrorMessage(bot, message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤")
			return
		}

		if len(tickets) == 0 {
			msg := tgbotapi.NewMessage(message.Chat.ID, "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.")
			msg.ReplyMarkup = GetMainMenuKeyboard()
			SafeSendMessage(bot, msg)
			return
		}

		// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–∫–µ—Ç–∞–º–∏
		ticketButtons := make([][]tgbotapi.KeyboardButton, 0, len(tickets)+1)

		for _, ticket := range tickets {
			// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–∏–∫–µ—Ç–µ
			count, err := database.GetTicketMessageCount(ticket.ID)
			if err != nil {
				logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–∫–µ—Ç–∞ %d: %v", ticket.ID, err)
				count = 0
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
			statusEmoji := getStatusEmoji(ticket.Status)

			// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–∫–µ—Ç–µ
			buttonLabel := fmt.Sprintf("#%d %s %s [%d —Å–æ–æ–±—â.]",
				ticket.ID, statusEmoji, truncateString(ticket.Title, 25), count)

			ticketButtons = append(ticketButtons, tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton(buttonLabel),
			))
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
		ticketButtons = append(ticketButtons, tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"),
		))

		msg := tgbotapi.NewMessage(message.Chat.ID, "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã:")
		msg.ReplyMarkup = tgbotapi.NewReplyKeyboard(ticketButtons...)
		SafeSendMessage(bot, msg)

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–∏–∫–µ—Ç–æ–≤
		userStates[userID] = &UserState{State: "viewing_tickets"}

	case "üìö –ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–æ–≤", "–ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–æ–≤":
		tickets, err := database.GetTicketHistory(userID)
		if err != nil {
			logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, err)
			SendErrorMessage(bot, message.Chat.ID, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤")
			return
		}

		if len(tickets) == 0 {
			msg := tgbotapi.NewMessage(message.Chat.ID, "üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∏–∫–µ—Ç–æ–≤.")
			msg.ReplyMarkup = GetMainMenuKeyboard()
			SafeSendMessage(bot, msg)
			return
		}

		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤ –¥–æ 50
		maxTickets := 50
		var ticketsToShow []database.Ticket
		var limitMessage string

		if len(tickets) > maxTickets {
			ticketsToShow = tickets[len(tickets)-maxTickets:]
			limitMessage = fmt.Sprintf("‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ %d —Ç–∏–∫–µ—Ç–æ–≤ –∏–∑ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏.", maxTickets)
		} else {
			ticketsToShow = tickets
			limitMessage = ""
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤
		headerMsg := tgbotapi.NewMessage(message.Chat.ID, fmt.Sprintf("üìö *–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö —Ç–∏–∫–µ—Ç–æ–≤* (%d)\n\n%s", len(tickets), limitMessage))
		headerMsg.ParseMode = "Markdown"
		headerMsg.ReplyMarkup = GetMainMenuKeyboard()
		SafeSendMessage(bot, headerMsg)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–∫–µ—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		for _, ticket := range ticketsToShow {
			// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ç–∏–∫–µ—Ç–µ
			count, err := database.GetTicketMessageCount(ticket.ID)
			if err != nil {
				logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–∫–µ—Ç–∞ %d: %v", ticket.ID, err)
				count = 0
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
			statusEmoji := getStatusEmoji(ticket.Status)

			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è
			createdDate := ticket.CreatedAt.Format("02.01.2006 15:04")

			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∑–∞–∫—Ä—ã—Ç–∏—è, –µ—Å–ª–∏ —Ç–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç
			closedDate := ""
			if ticket.Status == "–∑–∞–∫—Ä—ã—Ç" && ticket.ClosedAt.Valid {
				closedDate = fmt.Sprintf("\nüîí –ó–∞–∫—Ä—ã—Ç: %s", ticket.ClosedAt.Time.Format("02.01.2006 15:04"))
			}

			// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–∫–µ—Ç–µ
			ticketMsg := fmt.Sprintf(
				"üîñ *–¢–∏–∫–µ—Ç #%d*\n%s %s\n\nüìù –ö–∞—Ç–µ–≥–æ—Ä–∏—è: %s\nüìÖ –°–æ–∑–¥–∞–Ω: %s%s\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–π: %d\n\n–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`/ticket %d`",
				ticket.ID,
				statusEmoji,
				ticket.Title,
				ticket.Category,
				createdDate,
				closedDate,
				count,
				ticket.ID,
			)

			msg := tgbotapi.NewMessage(message.Chat.ID, ticketMsg)
			msg.ParseMode = "Markdown"
			SafeSendMessage(bot, msg)

			// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ñ–ª—É–¥–∞
			time.Sleep(100 * time.Millisecond)
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤
		userStates[userID] = &UserState{State: "main_menu"}

	case "‚ú® –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç", "–°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç":
		// –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ —Å –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		userStates[userID] = &UserState{State: "creating_ticket_category"}

		msg := tgbotapi.NewMessage(message.Chat.ID,
			"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—Ä–∞—â–µ–Ω–∏—è:")
		msg.ReplyMarkup = GetCategoryKeyboard()
		SafeSendMessage(bot, msg)

	default:
		// –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
		msg := tgbotapi.NewMessage(message.Chat.ID,
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")
		msg.ReplyMarkup = GetMainMenuKeyboard()
		SafeSendMessage(bot, msg)
	}
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
func generateTicketTitle(category, description string) string {
	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
	categoryPrefix := map[string]string{
		"—Å–ø—Ä–æ—Å–∏—Ç—å": "–í–æ–ø—Ä–æ—Å",
		"–ø—Ä–æ–±–ª–µ–º–∞": "–ü—Ä–æ–±–ª–µ–º–∞",
		"–∏–¥–µ—è":     "–ò–¥–µ—è",
	}[category]

	// –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 4 —Å–ª–æ–≤–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
	words := strings.Fields(description)
	maxWords := 4
	if len(words) < maxWords {
		maxWords = len(words)
	}

	shortDescription := strings.Join(words[:maxWords], " ")

	// –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –¥–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ
	if len(words) > maxWords {
		shortDescription += "..."
	}

	return fmt.Sprintf("%s: %s", categoryPrefix, shortDescription)
}

// getStatusEmoji –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞ (–≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è)
func getStatusEmoji(status string) string {
	return GetStatusEmoji(status)
}

// GetStatusEmoji –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞ (—ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
func GetStatusEmoji(status string) string {
	switch status {
	case "–æ—Ç–∫—Ä—ã—Ç":
		return "üåü" // –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç
	case "–≤ —Ä–∞–±–æ—Ç–µ":
		return "üîÑ" // –¢–∏–∫–µ—Ç –≤ —Ä–∞–±–æ—Ç–µ
	case "–æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞":
		return "üí≠" // –û–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞
	case "–∑–∞–∫—Ä—ã—Ç":
		return "‚ú®" // –ó–∞–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç
	default:
		return "‚ùì" // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
	}
}

// truncateString –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
func truncateString(s string, maxLength int) string {
	if len(s) <= maxLength {
		return s
	}
	return s[:maxLength-3] + "..."
}

// showTicketConversationReadOnly –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è
func showTicketConversationReadOnly(bot *tgbotapi.BotAPI, chatID int64, ticketID int) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
	ticket, err := database.GetTicketByID(ticketID)
	if err != nil {
		logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞ %d: %v", ticketID, err)
		SendErrorMessage(bot, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
	messages, err := database.GetTicketMessages(ticketID)
	if err != nil {
		logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–∫–µ—Ç–∞ %d: %v", ticketID, err)
		SendErrorMessage(bot, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞")
		return
	}

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
	maxMessages := 50
	if len(messages) > maxMessages {
		messages = messages[len(messages)-maxMessages:]
		warningMsg := tgbotapi.NewMessage(chatID,
			fmt.Sprintf("‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ %d —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ %d", maxMessages, len(messages)))
		SafeSendMessage(bot, warningMsg)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—É—é —à–∞–ø–∫—É —Ç–∏–∫–µ—Ç–∞ —Å —ç–º–æ–¥–∑–∏ –∏ –ø–æ–º–µ—Ç–∫–æ–π "—Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"
	headerText := fmt.Sprintf("üìñ *–¢–ò–ö–ï–¢ #%d (–¢–û–õ–¨–ö–û –ü–†–û–°–ú–û–¢–†)* üìñ\n\n"+
		"üìù *–¢–µ–º–∞:* %s\n"+
		"üìÖ *–°–æ–∑–¥–∞–Ω:* %s\n"+
		"üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* %s\n"+
		"üìä *–°—Ç–∞—Ç—É—Å:* %s %s\n\n"+
		"üí¨ *–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:*\n",
		ticket.ID, ticket.Title,
		ticket.CreatedAt.Format("02.01.2006 15:04"),
		getCategoryName(ticket.Category),
		getStatusEmoji(ticket.Status), ticket.Status)

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–µ –±–ª–æ–∫–∏
	const maxTelegramMessageSize = 4000
	var combinedMessages = headerText
	var messageCounter int

	// –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–∫–∞–∂–µ–º —ç—Ç–æ –≤ –ø–µ—Ä–≤–æ–º –±–ª–æ–∫–µ
	if len(messages) == 0 {
		combinedMessages += "\nüîç –í —ç—Ç–æ–º —Ç–∏–∫–µ—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π."
		msg := tgbotapi.NewMessage(chatID, combinedMessages)
		msg.ParseMode = "Markdown"
		SafeSendMessage(bot, msg)
	} else {
		// –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–ª–æ–∫–∏
		for i, message := range messages {
			var sender string
			var messagePrefix string
			var senderEmoji string

			if message.SenderType == "user" {
				senderEmoji = "üë§"
				sender = "–í—ã"
				messagePrefix = "üí¨"
			} else {
				senderEmoji = "üë®‚Äçüíº"
				// –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
				supportName, err := database.GetUserNameByID(message.SenderID)
				if err != nil {
					supportName = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
				}
				sender = supportName
				messagePrefix = "üó®Ô∏è"
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏
			timeStr := message.CreatedAt.Format("02.01.2006 15:04")
			singleMessage := fmt.Sprintf("%s\n%s %s (%s)\n%s %s\n",
				getSeparator(messageCounter > 0),
				senderEmoji, sender,
				timeStr,
				messagePrefix,
				formatMessageText(message.Message))

			// –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
			if messageCounter == 0 || len(combinedMessages)+len(singleMessage) > maxTelegramMessageSize {
				if messageCounter > 0 {
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫
					msg := tgbotapi.NewMessage(chatID, combinedMessages)
					msg.ParseMode = "Markdown"
					SafeSendMessage(bot, msg)
				}

				// –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–º –±–ª–æ–∫–µ (–Ω–µ –ø–µ—Ä–≤—ã–π –±–ª–æ–∫)
				if messageCounter > 0 {
					// –ù–æ–≤—ã–π –±–ª–æ–∫ –Ω–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
					combinedMessages = fmt.Sprintf("üìñ *–¢–ò–ö–ï–¢ #%d (–¢–û–õ–¨–ö–û –ü–†–û–°–ú–û–¢–† - –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)* üìñ\n\n", ticket.ID)
				}

				// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				combinedMessages += singleMessage
				messageCounter = 1
			} else {
				// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É –±–ª–æ–∫—É
				combinedMessages += singleMessage
				messageCounter++
			}

			// –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			if i == len(messages)-1 && combinedMessages != "" {
				msg := tgbotapi.NewMessage(chatID, combinedMessages)
				msg.ParseMode = "Markdown"
				SafeSendMessage(bot, msg)
			}
		}
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
	keyboard := tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("üñº –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"),
		),
	)

	msg := tgbotapi.NewMessage(chatID,
		"üìñ *–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ)*\n\n"+
			"üñº –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ'\n"+
			"‚¨ÖÔ∏è –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	SafeSendMessage(bot, msg)
}

// showTicketConversation –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
func showTicketConversation(bot *tgbotapi.BotAPI, chatID int64, ticketID int) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
	ticket, err := database.GetTicketByID(ticketID)
	if err != nil {
		logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞ %d: %v", ticketID, err)
		SendErrorMessage(bot, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
	messages, err := database.GetTicketMessages(ticketID)
	if err != nil {
		logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–∏–∫–µ—Ç–∞ %d: %v", ticketID, err)
		SendErrorMessage(bot, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞")
		return
	}

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
	maxMessages := 50
	if len(messages) > maxMessages {
		messages = messages[len(messages)-maxMessages:]
		warningMsg := tgbotapi.NewMessage(chatID,
			fmt.Sprintf("‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ %d —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ %d", maxMessages, len(messages)))
		SafeSendMessage(bot, warningMsg)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—É—é —à–∞–ø–∫—É —Ç–∏–∫–µ—Ç–∞ —Å —ç–º–æ–¥–∑–∏
	headerText := fmt.Sprintf("üé´ *–¢–ò–ö–ï–¢ #%d* üé´\n\n"+
		"üìù *–¢–µ–º–∞:* %s\n"+
		"üìÖ *–°–æ–∑–¥–∞–Ω:* %s\n"+
		"üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* %s\n"+
		"üìä *–°—Ç–∞—Ç—É—Å:* %s %s\n\n"+
		"üí¨ *–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:*\n",
		ticket.ID, ticket.Title,
		ticket.CreatedAt.Format("02.01.2006 15:04"),
		getCategoryName(ticket.Category),
		getStatusEmoji(ticket.Status), ticket.Status)

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ–ª–µ–µ –∫—Ä—É–ø–Ω—ã–µ –±–ª–æ–∫–∏
	const maxTelegramMessageSize = 4000 // –ù–µ–º–Ω–æ–≥–æ –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ (4096), –¥–ª—è –∑–∞–ø–∞—Å–∞
	var combinedMessages = headerText   // –ù–∞—á–∏–Ω–∞–µ–º —Å —à–∞–ø–∫–∏
	var messageCounter int

	// –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π, –ø–æ–∫–∞–∂–µ–º —ç—Ç–æ –≤ –ø–µ—Ä–≤–æ–º –±–ª–æ–∫–µ
	if len(messages) == 0 {
		combinedMessages += "\nüîç –í —ç—Ç–æ–º —Ç–∏–∫–µ—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π."
		msg := tgbotapi.NewMessage(chatID, combinedMessages)
		msg.ParseMode = "Markdown"
		SafeSendMessage(bot, msg)
	} else {
		// –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–ª–æ–∫–∏
		for i, message := range messages {
			var sender string
			var messagePrefix string
			var senderEmoji string

			if message.SenderType == "user" {
				senderEmoji = "üë§"
				sender = "–í—ã"
				messagePrefix = "üí¨"
			} else {
				senderEmoji = "üë®‚Äçüíº"
				// –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
				supportName, err := database.GetUserNameByID(message.SenderID)
				if err != nil {
					supportName = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
				}
				sender = supportName
				messagePrefix = "üó®Ô∏è"
			}

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —ç–º–æ–¥–∑–∏
			timeStr := message.CreatedAt.Format("02.01.2006 15:04")
			singleMessage := fmt.Sprintf("%s\n%s %s (%s)\n%s %s\n",
				getSeparator(messageCounter > 0), // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
				senderEmoji, sender,              // –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å —ç–º–æ–¥–∑–∏
				timeStr,
				messagePrefix,
				formatMessageText(message.Message)) // –¢–µ–∫—Å—Ç –≤ –∫–æ–ø–∏—Ä—É–µ–º–æ–º –±–ª–æ–∫–µ

			// –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—Å–∏—Ç –ª–∏–º–∏—Ç
			if messageCounter == 0 || len(combinedMessages)+len(singleMessage) > maxTelegramMessageSize {
				if messageCounter > 0 {
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±–ª–æ–∫
					msg := tgbotapi.NewMessage(chatID, combinedMessages)
					msg.ParseMode = "Markdown"
					SafeSendMessage(bot, msg)
				}

				// –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–º –±–ª–æ–∫–µ (–Ω–µ –ø–µ—Ä–≤—ã–π –±–ª–æ–∫)
				if messageCounter > 0 {
					// –ù–æ–≤—ã–π –±–ª–æ–∫ –Ω–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
					combinedMessages = fmt.Sprintf("üé´ *–¢–ò–ö–ï–¢ #%d (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)* üé´\n\n", ticket.ID)
				}

				// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				combinedMessages += singleMessage
				messageCounter = 1
			} else {
				// –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É –±–ª–æ–∫—É
				combinedMessages += singleMessage
				messageCounter++
			}

			// –î–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			if i == len(messages)-1 && combinedMessages != "" {
				msg := tgbotapi.NewMessage(chatID, combinedMessages)
				msg.ParseMode = "Markdown"
				SafeSendMessage(bot, msg)
			}
		}
	}

	// –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç
	if ticket.Status != "–∑–∞–∫—Ä—ã—Ç" {
		// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
		keyboard := tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("üñº –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ"),
				tgbotapi.NewKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç"),
			),
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"),
			),
		)

		msg := tgbotapi.NewMessage(chatID,
			"‚úèÔ∏è *–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.*\n\n"+
				"üñº –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ'\n"+
				"‚¨ÖÔ∏è –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = keyboard
		SafeSendMessage(bot, msg)
	} else {
		// –ï—Å–ª–∏ —Ç–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç
		keyboard := tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("üñº –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ–æ—Ç–æ"),
			),
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"),
			),
		)

		msg := tgbotapi.NewMessage(chatID,
			"üîí *–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω.*\n\n"+
				"üñº –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"+
				"‚¨ÖÔ∏è –ò–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
		msg.ParseMode = "Markdown"
		msg.ReplyMarkup = keyboard
		SafeSendMessage(bot, msg)
	}
}

// –ë–æ–ª–µ–µ —ç—Å—Ç–µ—Ç–∏—á–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π
func getSeparator(show bool) string {
	if show {
		return "\n‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ"
	}
	return ""
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–ø–∏—Ä—É–µ–º—ã–π –±–ª–æ–∫
func formatMessageText(text string) string {
	// –ë–ª–æ–∫ –∫–æ–¥–∞ –≤ —Ç—Ä–∏ –æ–±—Ä–∞—Ç–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ - –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
	return "`\n" + text + "`"
}

// getCategoryName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
func getCategoryName(category string) string {
	switch category {
	case "–í–æ–ø—Ä–æ—Å":
		return "–í–æ–ø—Ä–æ—Å"
	case "–í–∞–∂–Ω–æ–µ":
		return "–í–∞–∂–Ω–æ,–°—Ä–æ—á–Ω–æ"
	case "–§–∏–Ω–∞–Ω—Å—ã":
		return "–§–∏–Ω–∞–Ω—Å—ã"
	default:
		return category
	}
}

// HandleCloseTicket –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–∫—Ä—ã—Ç–∏–µ —Ç–∏–∫–µ—Ç–∞
func HandleCloseTicket(bot *tgbotapi.BotAPI, chatID int64, userID int64, ticketID int) {
	// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	err := database.CloseTicket(ticketID, userID)
	if err != nil {
		logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞ %d: %v", ticketID, err)
		SendErrorMessage(bot, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üîí *–¢–∏–∫–µ—Ç #%d —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç*\n\n–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç.", ticketID))
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = GetMainMenuKeyboard()
	SafeSendMessage(bot, msg)

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	userStates[userID] = &UserState{State: "main_menu"}
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤
func SendRandomTip(bot *tgbotapi.BotAPI, chatID int64) {
	tips := []string{
		"üí° –°–æ–≤–µ—Ç: –ü—Ä–∏–∫—Ä–µ–ø–ª—è–π—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ —Ç–∏–∫–µ—Ç–∞–º –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã.",
		"üí° –°–æ–≤–µ—Ç: –ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –≤ —Ç–∏–∫–µ—Ç–µ –¥–ª—è –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π –ø–æ–º–æ—â–∏.",
		"üí° –°–æ–≤–µ—Ç: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–í–∞–∂–Ω–æ,–°—Ä–æ—á–Ω–æ' —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Ä–æ—á–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.",
		"üí° –°–æ–≤–µ—Ç: –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö —Ç–∏–∫–µ—Ç–æ–≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.",
		"üí° –°–æ–≤–µ—Ç: –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç.",
	}

	// –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç
	rand.Seed(time.Now().UnixNano())
	randomTip := tips[rand.Intn(len(tips))]

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≤–µ—Ç
	msg := tgbotapi.NewMessage(chatID, randomTip)
	SafeSendMessage(bot, msg)
}

// showTicketPhotos –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–∏–∫–µ—Ç–∞
func showTicketPhotos(bot *tgbotapi.BotAPI, chatID int64, ticketID int) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–∏–∫–µ—Ç–∞
	photos, err := database.GetTicketPhotos(ticketID)
	if err != nil {
		logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–∏–∫–µ—Ç–∞ %d: %v", ticketID, err)
		SendErrorMessage(bot, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç–∏–∫–µ—Ç–∞")
		return
	}

	if len(photos) == 0 {
		msg := tgbotapi.NewMessage(chatID, "üì∑ –í —ç—Ç–æ–º —Ç–∏–∫–µ—Ç–µ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")
		SafeSendMessage(bot, msg)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
	msg := tgbotapi.NewMessage(chatID,
		fmt.Sprintf("üñº *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ —Ç–∏–∫–µ—Ç—É #%d*\n\n–ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: %d", ticketID, len(photos)))
	msg.ParseMode = "Markdown"
	SafeSendMessage(bot, msg)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é (–º–∞–∫—Å–∏–º—É–º 10)
	maxPhotos := 10
	if len(photos) > maxPhotos {
		photos = photos[len(photos)-maxPhotos:]
		warningMsg := tgbotapi.NewMessage(chatID,
			fmt.Sprintf("‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ %d –∏–∑ %d —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π", maxPhotos, len(photos)))
		SafeSendMessage(bot, warningMsg)
	}

	for i, photo := range photos {
		// –í–º–µ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è FileID, –ø—Ä–æ—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
		var photoMsg tgbotapi.PhotoConfig

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
		_, err := os.Stat(photo.FilePath)
		if err != nil {
			// –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
			errorMsg := tgbotapi.NewMessage(chatID,
				fmt.Sprintf("‚ö†Ô∏è –§–æ—Ç–æ #%d –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", i+1))
			SafeSendMessage(bot, errorMsg)
			continue
		}

		// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª
		file, err := os.Open(photo.FilePath)
		if err != nil {
			logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ %s: %v", photo.FilePath, err)
			errorMsg := tgbotapi.NewMessage(chatID,
				fmt.Sprintf("‚ö†Ô∏è –§–æ—Ç–æ #%d –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ: –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞", i+1))
			SafeSendMessage(bot, errorMsg)
			continue
		}
		defer file.Close()

		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–∑ —Ñ–∞–π–ª–∞
		photoMsg = tgbotapi.NewPhoto(chatID, tgbotapi.FileReader{
			Name:   fmt.Sprintf("photo_%d.jpg", i+1),
			Reader: file,
		})

		var senderEmoji, sender string
		if photo.SenderType == "user" {
			senderEmoji = "üë§"
			sender = "–í—ã"
		} else {
			senderEmoji = "üë®‚Äçüíº"
			supportName, err := database.GetUserNameByID(photo.SenderID)
			if err != nil {
				supportName = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"
			}
			sender = supportName
		}

		photoMsg.Caption = fmt.Sprintf("üì∑ *–§–æ—Ç–æ #%d*\nüë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: %s %s\nüïí –î–∞—Ç–∞: %s",
			i+1, senderEmoji, sender, photo.CreatedAt.Format("02.01.2006 15:04"))
		photoMsg.ParseMode = "Markdown"

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
		_, err = bot.Send(photoMsg)
		if err != nil {
			logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ %s: %v", photo.FilePath, err)
			errorMsg := tgbotapi.NewMessage(chatID,
				fmt.Sprintf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ #%d", i+1))
			SafeSendMessage(bot, errorMsg)
		}

		// –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
		time.Sleep(300 * time.Millisecond)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	backMsg := tgbotapi.NewMessage(chatID, "‚¨ÖÔ∏è –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –¥–∏–∞–ª–æ–≥—É –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'")
	backMsg.ReplyMarkup = tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"),
		),
	)
	SafeSendMessage(bot, backMsg)
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–∫–µ—Ç–µ
func generateTicketQR(bot *tgbotapi.BotAPI, chatID int64, ticketID int) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
	ticket, err := database.GetTicketByID(ticketID)
	if err != nil {
		logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞ %d: %v", ticketID, err)
		SendErrorMessage(bot, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è QR-–∫–æ–¥–∞
	qrText := fmt.Sprintf("–¢–∏–∫–µ—Ç #%d\n–¢–µ–º–∞: %s\n–°—Ç–∞—Ç—É—Å: %s\n–°–æ–∑–¥–∞–Ω: %s",
		ticket.ID, ticket.Title, ticket.Status, ticket.CreatedAt.Format("02.01.2006 15:04"))

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º helper –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ../uploads
	qrDirBase := ensureUploadsDir()

	// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É QR-–∫–æ–¥–∞
	// ensureUploadsDir –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
	// –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ ensureUploadsDir –∏ –æ–Ω–∞ –≤–µ—Ä–Ω—É–ª–∞ "uploads",
	// QR-–∫–æ–¥ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ "uploads".
	qrFilePath := filepath.Join(qrDirBase, fmt.Sprintf("qr_ticket_%d.png", ticketID))
	err = qrcode.WriteFile(qrText, qrcode.Medium, 256, qrFilePath)
	if err != nil {
		logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: %v", err)
		SendErrorMessage(bot, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º QR-–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	file, err := os.Open(qrFilePath)
	if err != nil {
		logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ QR-–∫–æ–¥–∞: %v", err)
		SendErrorMessage(bot, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å QR-–∫–æ–¥")
		return
	}
	defer file.Close()

	photoMsg := tgbotapi.NewPhoto(chatID, tgbotapi.FileReader{
		Name:   fmt.Sprintf("qr_ticket_%d.png", ticketID),
		Reader: file,
	})
	photoMsg.Caption = "üîç QR-–∫–æ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–∞—à–µ–º —Ç–∏–∫–µ—Ç–µ"

	_, err = bot.Send(photoMsg)
	if err != nil {
		logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ QR-–∫–æ–¥–∞: %v", err)
		SendErrorMessage(bot, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å QR-–∫–æ–¥")
	}
}

// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞
func showTicketStatus(bot *tgbotapi.BotAPI, chatID int64, ticketID int) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
	ticket, err := database.GetTicketByID(ticketID)
	if err != nil {
		logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞ %d: %v", ticketID, err)
		SendErrorMessage(bot, chatID, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
	messageCount, err := database.GetTicketMessageCount(ticketID)
	if err != nil {
		logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
		messageCount = 0
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
	photos, err := database.GetTicketPhotos(ticketID)
	if err != nil {
		logger.Error.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: %v", err)
		photos = nil
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
	statusText := fmt.Sprintf("üìä *–°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ #%d*\n\n"+
		"üìù *–¢–µ–º–∞:* %s\n"+
		"üè∑Ô∏è *–ö–∞—Ç–µ–≥–æ—Ä–∏—è:* %s\n"+
		"üìä *–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:* %s %s\n"+
		"üìÖ *–°–æ–∑–¥–∞–Ω:* %s\n"+
		"üí¨ *–°–æ–æ–±—â–µ–Ω–∏–π:* %d\n"+
		"üñº *–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:* %d\n\n"+
		"‚è± *–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:* %s",
		ticket.ID, ticket.Title,
		getCategoryName(ticket.Category),
		getStatusEmoji(ticket.Status), ticket.Status,
		ticket.CreatedAt.Format("02.01.2006 15:04"),
		messageCount,
		len(photos),
		time.Now().Format("02.01.2006 15:04:05"))

	msg := tgbotapi.NewMessage(chatID, statusText)
	msg.ParseMode = "Markdown"
	SafeSendMessage(bot, msg)
}
